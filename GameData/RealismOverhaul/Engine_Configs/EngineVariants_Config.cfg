//  ==================================================
//  Turn MPEC into MEC so other patches can run
//  ==================================================

@PART[*]:HAS[@MODULE[ModulePatchableEngineConfigs]]:FOR[RealismOverhaulEnginesPost]
{
	@MODULE[ModulePatchableEngineConfigs]
	{
		%__postConfigMPEC = true
		@name = ModuleEngineConfigs
	}
}

//  ==================================================
//  Take the engineTypeMult field and apply that to
//  cost, mass and minthrust/maxthrust.
//  ==================================================

@PART[*]:HAS[#engineTypeMult[*],~minActiveEngines[*]]:FOR[RealismOverhaulEnginesPost]
{
	@MODULE[ModuleEngineConfigs]
	{
		@origMass *= #$../engineTypeMult$

		@CONFIG,*
		{
			@cost *= #$../../engineTypeMult$
			@minThrust *= #$../../engineTypeMult$
			@maxThrust *= #$../../engineTypeMult$
			@thrusterPower *= #$../../engineTypeMult$
			@SUBCONFIG,*
			{
				@cost *= #$../../../engineTypeMult$
				@minThrust *= #$../../../engineTypeMult$
				@maxThrust *= #$../../../engineTypeMult$
				@thrusterPower *= #$../../../engineTypeMult$
			}
		}
	}
}

//  ==================================================
//  Same as above, but have minThrust based on less
//  engines if variable is set.
//  ==================================================

@PART[*]:HAS[#engineTypeMult[*],#minActiveEngines[*]]:FOR[RealismOverhaulEnginesPost]
{
    @MODULE[ModuleEngineConfigs]
    {
        @origMass *= #$../engineTypeMult$

        @CONFIG,*
        {
            @cost *= #$../../engineTypeMult$
            @minThrust *= #$../../minActiveEngines$
            @maxThrust *= #$../../engineTypeMult$
			@thrusterPower *= #$../../engineTypeMult$
			@SUBCONFIG,*
			{
				@cost *= #$../../../engineTypeMult$
				@minThrust *= #$../../../minActiveEngines$
				@maxThrust *= #$../../../engineTypeMult$
				@thrusterPower *= #$../../../engineTypeMult$
			}
        }
    }
}

//  ==================================================
//  For engines with effectively extra dead/structural
//  mass.
//  ==================================================

@PART[*]:HAS[#massOffset[*]]:FOR[RealismOverhaulEnginesPost]
{
	@MODULE[ModuleEngineConfigs]
	{
		@origMass += #$../massOffset$
	}
}

//  ==================================================
//  Deletes origmass if ignoreMass field is found, use
//  it to avoid the engine changing the mass of a part.
//  ==================================================

@PART[*]:HAS[#ignoreMass[*rue]]:FOR[RealismOverhaulEnginesPost]
{
	@MODULE[ModuleEngineConfigs]
	{
		!origMass = 0
	}
}

//  ==================================================
//  Subtract thrust from engines with built-in verniers.
//  ==================================================

@PART[*]:HAS[#useVerniers[*rue]]:FOR[RealismOverhaulEnginesPost]
{
	@MODULE[ModuleEngineConfigs]
    {
		@CONFIG,*
		{
			@maxThrust -= #$../../vernierThrust$
			@minThrust -= #$../../vernierThrust$
			@SUBCONFIG,*
			{
				@maxThrust -= #$../../../vernierThrust$
				@minThrust -= #$../../../vernierThrust$
			}
		}
    }
}

//  ==================================================
//  Take the engineTypeCostMult field and apply that to
//  cost
//  ==================================================

@PART[*]:HAS[#engineTypeCostMult[*]]:FOR[RealismOverhaulEnginesPost]
{
	@MODULE[ModuleEngineConfigs]
	{
		@CONFIG,*
		{
			@cost *= #$../../engineTypeCostMult$
			@SUBCONFIG,*
			{
				@cost *= #$../../../engineTypeCostMult$
			}
		}
	}
}

//  ==================================================
//  Take the engineTypeMassMult field and apply that to
//  mass.
//  ==================================================

@PART[*]:HAS[#engineTypeMassMult[*],~minActiveEngines[*]]:FOR[RealismOverhaulEnginesPost]
{
	@MODULE[ModuleEngineConfigs]
	{
		@origMass *= #$../engineTypeMassMult$
	}
}

//  ==================================================
//  Turn MEC that should be MPEC back into MPEC
//  ==================================================
@PART[*]:HAS[@MODULE[ModuleEngineConfigs]:HAS[#__postConfigMPEC[true]]]:FOR[zzzTagCleanup]
{
	@MODULE[ModuleEngineConfigs]:HAS[#__postConfigMPEC[true]]
	{
		@name = ModulePatchableEngineConfigs
		!__postConfigMPEC = NULL
	}
}

//  ==================================================
//  Config cleanup.
//  ==================================================

@PART[*]:HAS[#engineType[*]]:FOR[zzzTagCleanup]
{
    !engineType = NULL
    !engineTypeMult = NULL
	!engineTypeCostMult = NULL
	!engineTypeMassMult = NULL
    !minActiveEngines = NULL
    !useVerniers = NULL
    !massOffset = NULL
    !ignoreMass = NULL
}
