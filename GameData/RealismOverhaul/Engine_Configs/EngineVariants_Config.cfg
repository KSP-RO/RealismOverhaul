// take the engineTypeCost field and apply that to cost, mass and minthrust/maxthrust
@PART[*]:HAS[#engineTypeMult[*],~minActiveEngines[*]]:FINAL
{
	@MODULE[ModuleEngineConfigs]
	{
		@origMass *= #$../engineTypeMult$
		@CONFIG,*
		{
			@cost *= #$../../engineTypeMult$
			@minThrust *= #$../../engineTypeMult$
			@maxThrust *= #$../../engineTypeMult$
		}
	}
}
// same as above, but have minThrust based on less engines if variable is set.
@PART[*]:HAS[#engineTypeMult[*],#minActiveEngines[*]]:FINAL
{
    @MODULE[ModuleEngineConfigs]
    {
        @origMass *= #$../engineTypeMult$
        @CONFIG,*
        {
            @cost *= #$../../engineTypeMult$
            @minThrust *= #$../../minActiveEngines$
            @maxThrust *= #$../../engineTypeMult$
        }
    }
}
// for engines with effectively extra dead/structural mass
@PART[*]:HAS[#massOffset[*]]:AFTER[RealismOverhaulEngines]
{
	@MODULE[ModuleEngineConfigs]
	{
		@origMass += #$../massOffset$
	}
}
// deletes origmass if ignoreMass field is found, use to avoid the engine changing the mass of a part.
@PART[*]:HAS[#ignoreMass[true]]:AFTER[RealismOverhaulEngines]
{
	@MODULE[ModuleEngineConfigs]
	{
		!origMass = 0
	}
}
// Subtract thrust from engine with verniers defined.
@PART[*]:HAS[#useVerniers[True]]:AFTER[RealismOverhaulEngines] {
	@MODULE[ModuleEngineConfigs]
    {
		@CONFIG,*
		{
			@maxThrust -= #$../../vernierThrust$
			@minThrust -= #$../../vernierThrust$
		}
    }
}