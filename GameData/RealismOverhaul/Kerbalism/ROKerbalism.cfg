// =================================================================================
// This is the official profile of the Realism Overhaul Mod
// =================================================================================

// TO-DO's
//
// * Add configs for all historically used life support subsystems - done (only up to Apollo)
// * Add configs for all RO capsules with non-configurable slots - done (only up to Apollo)
// * Configure the general "life support" part that comes with kerbalism to use in Service Modules - done
// * Tweak stress values to allow historical missions and nerf interplanetary flyby in a mercury capsule - done (only up to Apollo, needs playtesting)
// * Add RP-0 support and experiment cfgs with the 2.2 science system
// * (Long Term) Add near future life support systems to allow long term mars missions (possibly not needed?)
// * RealISRU Support?

// NOTES
//
// * The RSS radiation profile needs to be completely remade, values are probably off
// * Shielding needs to be adjusted, it's currently using lead while it should use aluminum or polyethylene
// * Upgrades for EVA suits? Apollo doubled EVA duration from Apollo 14 and Shuttle/ISS suits improved duration again;
// * Mars suits would have Orion-like vacuum scrubbers and again, improved duration

// SOURCES
//
// NTRS - Fuel Cells for Space Science Applications (2003): https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/20040010319.pdf
// NTRS - The Fuel Cell in Space (1989): https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19900002488.pdf
// NTRS - Apollo portable life support system performance report (1972): https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19720019460.pdf
// NTRS - Radiation Protection for Lunar Mission Scenarios (2005): https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/20050215115.pdf
// NHRP - Risk of Radiation Carcinogenesis(2009) : https://humanresearchroadmap.nasa.gov/evidence/reports/Carcinogenesis.pdf

    
	// Carbon Dioxide Toxicity
	// 1% in air = Drowsiness
	// 3% in air = Mild narcosis, Reduced Hearing, Increased Heart Rate and Blood Pressure
	// 5% in air = Dizziness, Confusion, Headache, Shortness of Breath
	// 7-10% in air = Unconsciousness, Muscle Tremors, Suffocation and Death

Profile
{
	name = RealismOverhaul

// ==============================================================================
// SUPPLIES
// ==============================================================================

Supply
{
	resource = ElectricCharge
	on_eva = 1260.0 //temporary 350Wh based on the 279/360Wh batteries in the apollo PLSS
	low_message = $VESSEL batteries are getting low@<i>We must shut down non-essential systems</i>
	empty_message = $VESSEL has run out of ElectricCharge@<i>Life support systems are off</i>|$VESSEL is out of ElectricCharge@<i>We no longer have control</i>
	refill_message = $VESSEL batteries have been recharged@<i>All systems are back online</i>
}
Supply
{
	resource = Food
	on_pod = 29.5 // 5 days, FIXME
	low_message = Food reserves are getting low on $VESSEL@<i>All edible items are being rationed</i>
	empty_message = There is no more food on $VESSEL@<i>The crew prepares for the worst</i>
	refill_message = $VESSEL food reserves restored@<i>Rations have returned to normal amounts</i>
}
Supply
{
	resource = Water
	on_pod = 19.36 // 5 Days, FIXME
	on_eva = 6.5 // more than enough for an 8h EVA
	low_message = Water reserves are getting low on $VESSEL@<i>Bathing has been suspended</i>
	empty_message = $VESSEL is completely out of water@<i>We are in a state of emergency</i>
	refill_message = $VESSEL has restocked water reserves@<i>Regular bathing schedules can resume</i>
}
Supply
{
	resource = Oxygen
	on_pod = 2960 // 5 Days, FIXME
	on_eva = 195 // 8 hours
	low_message = Oxygen reserves are dangerously low on $VESSEL@<i>Something must be done immediately</i>
	empty_message = $VESSEL has run out of Oxygen@<i>It is only a matter of time for the crew</i>
	refill_message = $VESSEL Oxygen reserves refilled@<i>Everyone is breathing easier</i>
}
Supply
{
	resource = Nitrogen
	low_message = Nitrogen reserves are low on $VESSEL@<i>Please send a resupply mission</i>
	empty_message = $VESSEL is out of Nitrogen@<i>The crew should consider getting in their suits</i>
	refill_message = $VESSEL Nitrogen reserves refilled@<i>Normal operations can resume</i>
}
Supply
{
	resource = LithiumHydroxide
	low_message = Lithium Hydroxide reserves are low on $VESSEL@<i>Please send a resupply mission</i>
	empty_message = $VESSEL is out of Lithium Hydroxide@<i>We can no longer scrub CO2</i>
	refill_message = $VESSEL Lithium Hydroxide reserves refilled@<i>Normal operations can resume</i>
}
Supply
{
	resource = CarbonDioxide
	low_message = $VESSEL CO2 reserves are low
	empty_message = $VESSEL CO2 tanks are empty
	refill_message = $VESSEL has refilled the CO2 tanks
}
Supply
{
	resource = Ammonia
	low_message = $VESSEL Ammonia reserves are low
	empty_message = $VESSEL Ammonia tanks are empty
	refill_message = $VESSEL has refilled the Ammonia tanks
}
Supply
{
	resource = LqdHydrogen
	low_message = $VESSEL Liquid Hydrogen reserves are low
	empty_message = $VESSEL Liquid Hydrogen tanks are empty
	refill_message = $VESSEL has refilled the Liquid Hydrogen tanks
}
Supply
{
	resource = LqdOxygen
	low_message = $VESSEL Liquid Oxygen reserves are low
	empty_message = $VESSEL Liquid Oxygen tanks are empty
	refill_message = $VESSEL has refilled the Liquid Oxygen tanks
}

// ==============================================================================
// RULES
// ==============================================================================
    
	Rule
	{
		name = climatization
		input = ElectricCharge
		rate = 0.0001 // per-kelvin (temp diff), per m^3 (living space), per-second
		degeneration = 0.00000007 // about 2h at 100k temp diff in 20m^3 - FIXME default kerbalism value, needs testing
		modifier = temperature,volume,per_capita
		warning_message = $ON_VESSEL$KERBAL feels cold|$ON_VESSEL$KERBAL is sweating
		danger_message = $ON_VESSEL$KERBAL is freezing|$ON_VESSEL$KERBAL is burning alive
		fatal_message = $ON_VESSEL$KERBAL froze to death|$ON_VESSEL$KERBAL was burned alive
		relax_message = $ON_VESSEL$KERBAL hypothermia is under control|$ON_VESSEL$KERBAL is cooling down
	}
	Rule
	{
		name = eating
		input = Food
		output = Waste
		rate = 1.94976 // Based on RO-TACLS Profile (5.84928 per day)
		interval = 28800.0 // 3 Meals per day
		individuality = 0.00 // Everyone eats the same amount
		degeneration = 0.0111111 // 90 meals, 30 days (taken from TACLS profile)
		warning_message = $ON_VESSEL$KERBAL is hungry
		danger_message = $ON_VESSEL$KERBAL is starving
		fatal_message = $ON_VESSEL$KERBAL starved to death
		relax_message = $ON_VESSEL$KERBAL is enjoying a meal
	}
	Rule
	{
		name = drinking
		input = Water
		output = WasteWater
		rate = 0.774144 // Based on RO-TACLS Profile (3.87072 per day)
		interval = 17280.0 // 5 drinks per-day 
		degeneration = 0.0666666 // 15 drinks, 3 days (taken from TACLS profile)
		individuality = 0.00 // Everyone uses the same amount
		warning_message = $ON_VESSEL$KERBAL is thirsty
		danger_message = $ON_VESSEL$KERBAL is dehydrated
		fatal_message = $ON_VESSEL$KERBAL died from dehydration
		relax_message = $ON_VESSEL$KERBAL is enjoying a drink
	}
	Rule
	{
		name = breathing
		input = Oxygen
		output = WasteAtmosphere
		rate = 0.00685 // Based on RO-TACLS Profile (591.84 per day)
		degeneration = 0.00555555 // 3 minutes (taken from TACLS profile)
		modifier = non_breathable
		individuality = 0.00 // Everyone uses the same amount
		warning_message = $ON_VESSEL$KERBAL can't breathe
		danger_message = $ON_VESSEL$KERBAL is suffocating
		fatal_message = $ON_VESSEL$KERBAL suffocated to death
		relax_message = $ON_VESSEL$KERBAL is breathing again
	}
	Rule
	{
		name = humidity
		input = MoistAtmosphere
		output = MoistAtmosphere
		monitor = true
		monitor_offset = 0.6 // Base humidity of 60% - ***DO NOT CHANGE*** Bad things will happen as base humidity is Hard-Coded in Habitation.
		rate = 0.002879123 // Based on a humans output of humidity from breathing, a humans breath is at 100% humidity and at 50Ltr/day MoistAtmosphere, contains 850 mL of Water/day.
		input_threshold = 0.95
		degeneration = 0.000003858 // 3 days
		variance = 0.0 // No Variance
		warning_threshold = 0.85
		danger_threshold = 0.95
		fatal_threshold = 1.1
		modifier = humidity,non_breathable // if we are on a planet with breathable atmosphere vent moisture outside.
		warning_message = $ON_VESSEL$KERBAL notes condensation is forming
		danger_message = $ON_VESSEL$KERBAL is having difficulties working because of the high humidity environment
		relax_message = $ON_VESSEL$KERBAL is dry again
	}
	Rule
	{
		name = co2 poisoning
		degeneration = 0.000555556 // 30 minutes
		modifier = poisoning
		warning_threshold = 0.23
		warning_message = $ON_VESSEL$KERBAL's is beginning to feel drowsy
		danger_message = $ON_VESSEL$KERBAL is having trouble breathing
		fatal_message = $ON_VESSEL$KERBAL has died of CO2 poisoning
		relax_message = $ON_VESSEL$KERBAL is breathing normally again
	}
	Rule
	{
		name = stress
		degeneration = 0.000000008
		variance = 0.1
		individuality = 0.3
		modifier = living_space,comfort,pressure,humidity
		breakdown = true // trigger breakdown event instead of death
		warning_message = $ON_VESSEL$KERBAL is losing their mind@<i>Concentration is becoming a problem</i>
		danger_message = $ON_VESSEL$KERBAL is about to breakdown@<i>The stress is too much</i>
		relax_message = $ON_VESSEL$KERBAL is thinking straight now@<i>The stress level has reduced</i>
	}
	Rule
	{
		name = radiation
		degeneration = 1.0 // just use the modifier??
		variance = 0.1 // IRL variations are huge, may want to keep them low or remove them for balance though
		individuality = 0.1 // IRL variations are huge, may want to keep them low or remove them for balance though
		lifetime = true // Persists as a life time value
		modifier = radiation,shielding
		warning_threshold = 100.0 // FIXME - probably useless
		danger_threshold = 200.0 // FIXME - probably useless
		fatal_threshold = 300.0 // FIXME - based on the career limit for a 55y old male astronaut of 3 Sv
		warning_message = $ON_VESSEL$KERBAL has been exposed to intense radiation
		danger_message = $ON_VESSEL$KERBAL is reporting symptoms of radiation poisoning
		fatal_message = $ON_VESSEL$KERBAL died after being exposed to extreme radiation
		relax_message = $ON_VESSEL$KERBAL no longer exposed to high levels of radiation
	}

// ==============================================================================
// PROCESSES
// ==============================================================================


	Process
	{
		name = eva scrubber
		modifier = _EVAScrubber
		input = ElectricCharge@0.020
		input = WasteAtmosphere@0.0099  // efficiency starts at 2 (2 x a pods scrubber), reaches 1 in 8h, then drops below
		input = _EVAScrubber@0.0000347   
	}
	
	//Made for the Mercury Capsule
	Process
	{
		name = non-regenerative scrubber
		modifier = _NonRegenScrubber
		input = WasteAtmosphere@0.012432
		input = ElectricCharge@0.1
		input = LithiumHydroxide@0.00001189
		input = _NonRegenScrubber@0.00000570    //2 days, goes under the minimum shortly after
	}
  
	// Water sublimator for heat removal, currently half-useless since kerbals won't die when it runs out
	// Used to add EC consumption and water tanks to EVA - based on the Apollo PLSS
	Process
	{
		name = water sublimator
		modifier = _WaterSublimator
		input = ElectricCharge@0.020    // 45 watts (total with the scrubber) deducted from the Apollo PLSS battery load, rest is automatically added by the climatization rule
		input = Water@0.0001554    		//consumes around 0.56kg of water in 1h
	}

	// Based on the Lithium Hydroxide Apollo Scrubber
	// convention: 1 capacity = enough to scrub output of 1 crew member
	Process
	{
		name = scrubber
		modifier = _Scrubber
		input = ElectricCharge@0.1
		input = WasteAtmosphere@0.006216
		input = LithiumHydroxide@0.00001189
		output = CarbonDioxide@0.00003932
		dump = true
	}

	//Based on the Orion vacuum scrubber
	// convention: 1 capacity = enough to scrub output of 1 crew member
	Process
	{
		name = vacuum scrubber
		modifier = _AdvScrubber
		input = ElectricCharge@0.1
		input = WasteAtmosphere@0.006216
		input = Water@0.00001052    //some water is lost with the system
		output = CarbonDioxide@0.00003932
		dump = true
	}

	// ISS has normal air pressure at 101.3kPa (14.7 psi)
	// convention: 1 capacity = enough to compensate for leaks in 70 m^2 surface (a cube of 40 m^3 volume)
	Process
	{
		name = pressure control
		modifier = _PressureControl,non_breathable
		input = ElectricCharge@0.00858
		input = Nitrogen@0.35
		output = Atmosphere@0.35
	}

	// convention: when pressure control is disable in breathabe atmosphere, air pump will consume only EC and pumping air into the vessel
	Process
	{
		name = air pump
		modifier = _AirPump,breathable
		input = ElectricCharge@0.00258
		output = Atmosphere@7.35
	}
  
	// ISS THC keeps the ISS around 60% humidity
	// Once at 70% there are issues with microorganism growth
	// convention: 1 capacity = enough to reclaim moisture output of 1 crew member
	// 50Ltr per-day @100% humidity. Contains 850mL of Water per-day per Crew.
	Process
	{
		name = humidity controller
		modifier = _HumidityController
		input = ElectricCharge@0.0935
		input = MoistAtmosphere@0.00181978 
			// Calculated with the amount of water in a Liter of air @ 0.017mL/L (in real world this is approx. 100% saturation)
			// 850mL of Water divided by 0.017mL = 50L of MoistAtmosphere.
			// 50L divided by MoistAtmosphere density of 804mL/L = 62.18905473L
			// 62.18905473L / 86400 seconds (one day) = 0.00071978/s
		output = Water@0.00002487 // 53.125mL divided by density of Water = 0.053125L, divided by 21600 seconds (a Kerbal day of 6hrs) = 0.000009837975/s
		dump = true
	}
	
	Process
	{
		name = early humidity controller
		modifier = _HumidityControllerEarly
		input = ElectricCharge@0.0935
		input = MoistAtmosphere@0.00181978 
			// Calculated with the amount of water in a Liter of air @ 0.017mL/L (in real world this is approx. 100% saturation)
			// 850mL of Water divided by 0.017mL = 50L of MoistAtmosphere.
			// 50L divided by MoistAtmosphere density of 804mL/L = 62.18905473L
			// 62.18905473L / 86400 seconds (one day) = 0.00071978/s
		dump = true
	}
  
	// Based on ISS Urine Reclamation
	// convention: 1 capacity = enough to recycle output of 1 crew member
	Process
	{
		name = water recycler
		modifier = _WaterRecycler
		input = ElectricCharge@0.1
		input = WasteWater@0.00000619
		output = Water@0.0000336 // ISS currently achieves 75% Water recovery
		output = Ammonia@0.00000104 // Based on Wikipedia, we assume 4.21% of WasteWater is solids and 55% of solids are Urea    
		dump_valve = Water,Ammonia,Water&Ammonia
	}
  
	// FIXME: These don't exist yet, but most likely unnecessary in orbit as it is dumped from the craft. What to do on land bases? Add this for Moon Bases / Mars Bases?
	// convention: 1 capacity = enough to process output of 1 crew member
	Process
	{
		name = waste processor
		modifier = _WasteProcessor
		input = ElectricCharge@0.065556
		input = Waste@0.0000045525
		output = Ammonia@0.000031083125
			// According to https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4500995/ feces contains approximately 0.7% nitrogen.
			// Feces is considered to the dominant source of Waste
			// Waste is 975.3 times more dense than Ammonia
	}
	
	Process
	{
		name = waste incinerator
		modifier = _WasteIncinerator
		input = Waste@0.0001082667 // H18C82
		input = Oxygen@0.1589194249
		output = CarbonDioxide@0.1497439605
		output = Water@0.0000131259
		output = ElectricCharge@0.005
		dump_valve = Water,ElectricCharge,Water&ElectricCharge
	}
  
	Process
	{
		name = atmo leaks
		modifier = surface,non_breathable
		input = Atmosphere@0.000006711
			// dimensions based on this document: https://www.nasa.gov/pdf/179225main_ISS_Poster_Back.pdf
			// from ISS: 930 m³ volume, 0.227 Kg/day (structural) + 1.543 Kg/day (activities)
			// total pressurized space length (obtained by sum of all the individual modules length): 123.6 m
			// average module radius and corresponding surface area: 1.552 m, 1220 m² (estimated)
			// leak rate 0.0004 kg/(day*m²)
	}
	
	// Fuel Cells are based off of 1.0kW produced. For the process controller, we
	// should be multiplying the capacity * the amount we want produced
	// Eg. Apollo Fuel Cells were 1.42kW so the capacity = 1.42
	Process
	{
		name = fuel cell
		modifier = _FuelCell
		input = LqdHydrogen@0.000134718
		input = LqdOxygen@0.000269436
		output = Water@0.0001186
		output = ElectricCharge@1.0
		dump_valve = Water
	}
  
	// Based on current electrolysis rates where it takes 12.749kWh to make 1L of H
	// Convention: 1 "unit" creates just a little more O2 per second than is needed for 1 crew
	Process
	{
		name = water electrolysis
		modifier = _WaterElectrolysis
		input = ElectricCharge@0.178486
		input = Water@0.000011248
		output = Hydrogen@0.014
		output = Oxygen@0.007
		dump_valve = Hydrogen,Oxygen
	}
  
	Process
	{
		name = sabatier process
		modifier = _Sabatier
		input = ElectricCharge@0.8
		input = WasteAtmosphere@0.0172683775
		input = Hydrogen@0.064721246
		output = Water@0.0000259988
		output = LqdMethane@0.0000271941
		dump_valve = Water,LqdMethane
	}
  
  Process
  {
    name = brayton generator
    modifier = _BraytonGenerator
    input = EnrichedUranium@1.0813e-15
    output = ElectricCharge@25
    output = DepletedUranium@1.0813e-15
  }
  
  Process
  {
    name = turbine generator
    modifier = _TurbineGenerator
    input = EnrichedUranium@6.66667E-14
    output = ElectricCharge@1
    output = DepletedUranium@6.66667E-14
  }


  // FIXME: Determine proper Half-life for what we want
  Process
  {
    name = radioisotope generator
    modifier = _SNAP3RTG
    input = _SNAP3RTG@0.000000001888 // 28.8 kerbin-year half-life
    input = Plutonium-238@1.64e-10
    output = ElectricCharge@0.0025
    output = DepletedFuel@1.64e-10
  }
  Process
  {
    name = radioisotope generator
    modifier = _SNAP9RTG
    input = _SNAP9RTG@0.000000001888 // 28.8 kerbin-year half-life
    input = Plutonium-238@1.64e-10
    output = ElectricCharge@0.025
    output = DepletedFuel@1.64e-10
  }
  Process
  {
    name = radioisotope generator
    modifier = _SNAP19RTG
    input = _SNAP19RTG@0.000000001888 // 28.8 kerbin-year half-life
    input = Plutonium-238@6.34e-11
    output = ElectricCharge@0.08
    output = DepletedFuel@6.34e-11
  }
  Process
  {
    name = radioisotope generator
    modifier = _MHWRTG
    input = _MHWRTG@0.000000001888 // 28.8 kerbin-year half-life
    input = Plutonium-238@4.32e-10
    output = ElectricCharge@0.475
    output = DepletedFuel@4.32e-10
  }
  Process
  {
    name = radioisotope generator
    modifier = _GPHSRTG
    input = _GPHSRTG@0.000000001888 // 28.8 kerbin-year half-life
    input = Plutonium-238@2.59e-10
    output = ElectricCharge@0.3
    output = DepletedFuel@2.59e-10
  }
  Process
  {
    name = radioisotope generator
    modifier = _MMRTG
    input = _MMRTG@0.000000001888 // 28.8 kerbin-year half-life
    input = Plutonium-238@1.64e-10
    output = ElectricCharge@0.11
    output = DepletedFuel@1.64e-10
  }    

}

// ============================================================================
// Add configurable Life Support System to Life Support Unit part
// ============================================================================

@PART[kerbalism-lifesupportmodule]:NEEDS[ProfileRealismOverhaul]:FOR[Kerbalism]
{
	@mass = 0.001
	
	MODULE
	{
		name = ProcessController
		resource = _Scrubber
		title = Scrubber
		capacity = 3
		running = true
	}
	MODULE
	{
		name = ProcessController
		resource = _AdvScrubber
		title = Vacuum Scrubber
		capacity = 3
		running = true
	}
	MODULE
	{
		name = ProcessController
		resource = _PressureControl
		title = Pressure Controller
		capacity = 3
		running = true
	}
	MODULE
	{
		name = ProcessController
		resource = _AirPump
		title = Air Pump
		capacity = 3
		running = true
	}
	MODULE
	{
		name = ProcessController
		resource = _HumidityController
		title = Humidity Controller
		capacity = 3
		running = true
	}
	MODULE
	{
		name = ProcessController
		resource = _HumidityControllerEarly
		title = Humidity Controller (Early)
		capacity = 3
		running = true
	}
	MODULE
	{
		name = ProcessController
		resource = _WaterRecycler
		title = Water Recycler
		capacity = 3
		running = true
	}
	MODULE
	{
		name = ProcessController
		resource = _WasteProcessor
		title = Waste Processor
		capacity = 3
		running = true
	}
	MODULE
	{
		name = ProcessController
		resource = _FuelCell
		title = Apollo Fuel Cell
		capacity = 1.42
		running = true
	}
	
	 MODULE
  {
    name = Configure
    title = Life Support
    slots = 2

    UPGRADES
    {
      UPGRADE
      {
        name__ = Upgrade-Slots
        techRequired__ = start
        slots = 0
      }
    }
	
	SETUP
    {
      name = Scrubber
      desc = A Lithium Hydroxide scrubber that sequesters <b>CarbonDioxide</b> from the internal atmosphere.
      mass = 0.01 //WIP
      cost = 250 //WIP

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _Scrubber
      }
    }

    SETUP
    {
      name = Advanced Scrubber
      desc = A dual-bed vacuum-exposing regenerative scrubber that sequesters <b>CarbonDioxide</b> from the internal atmosphere.
      mass = 0.01 //WIP
      cost = 250 //WIP

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _AdvScrubber
      }
    }

    SETUP
    {
      name = Pressure Control
      desc = Use <b>Nitrogen</b> to maintain the internal atmosphere at a comfortable pressure.
      tech = start //WIP
      mass = 0.01 //WIP
      cost = 250 //WIP

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _PressureControl
      }

      // Air pump always is add with pressureControl
      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _AirPump
      }
    }
	
	SETUP
    {
      name = Humidity Controller (Early)
      desc = Removes <b>Water</b> from the internal atmosphere, <b>dumping it into space</b>.
      tech = start //WIP
      mass = 0.015 //WIP
      cost = 300 //WIP


      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _HumidityControllerEarly
      }
    }

    SETUP
    {
      name = Humidity Controller
      desc = Reclaims <b>Water</b> out of the internal atmosphere to maintain humidity.
      tech = start //WIP
      mass = 0.015 //WIP
      cost = 300 //WIP


      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _HumidityController
      }
    }

    SETUP
    {
      name = Water Recycler
      desc = Filter impurities out of <b>WasteWater</b>.
      tech = start //WIP
      mass = 0.05 //WIP
      cost = 500 //WIP

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _WaterRecycler
      }
    }

    SETUP
    {
      name = Waste Processor
      desc = Extract <b>Ammonia</b> out of decomposing organic <b>Waste</b>.
      tech = start //WIP
      mass = 0.05 //WIP
      cost = 500 //WIP

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _WasteProcessor
      }
	}
	
	SETUP
    {
      name = Apollo Fuel Cell
      desc = Combines <b>LqdHydrogen</b> and <b>LqdOxygen</b> to produce <b>Water</b> and <b>Electricity</b>.
      tech = start //WIP
      mass = 0.05 //WIP
      cost = 500 //WIP

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _FuelCell
      }
	}
  }
}

// ============================================================================
// Basic ISRU Chemical Plant (Experimental!!)
// ============================================================================
@PART[kerbalism-chemicalplant,MiniISRU,ISRU]:NEEDS[ProfileRealismOverhaul]:FOR[Kerbalism]
{
  !MODULE[ModuleResourceConverter]:HAS[#ConverterName[Lf+Ox]] {}
  !MODULE[ModuleResourceConverter]:HAS[#ConverterName[LiquidFuel]] {}
  !MODULE[ModuleResourceConverter]:HAS[#ConverterName[Oxidizer]] {}
  !MODULE[ModuleResourceConverter]:HAS[#ConverterName[Monoprop]] {}
  !MODULE[ModuleResourceConverter]:HAS[#ConverterName[MonoPropellant]] {}
  !MODULE[ModuleOverheatDisplay] {}
  !MODULE[ModuleCoreHeat] {}

  MODULE
  {
    name = ProcessController
	resource = _WasteIncinerator
	title = Waste Incinerator
	capacity = 3
	running = true
  }

  MODULE
  {
	name = ProcessController
	resource = _WaterElectrolysis
	title = Water electrolysis
	capacity = 1
  }

  MODULE
  {
	name = ProcessController
	resource = _Sabatier
	title = Sabatier process
	capacity = 1
  }
   MODULE
  {
    name = Configure
    title = Chemical Plant
    slots = 1

    UPGRADES
    {
      UPGRADE
      {
        name__ = Upgrade-Slots
        techRequired__ = start //WIP
        slots = 0
      }
    }

    SETUP
    {
      name = Water Electrolysis
      desc = Split <b>Water</b> into its <b>Hydrogen</b> and <b>Oxygen</b> components.
	  mass = 0.05 //WIP
      cost = 500 //WIP

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _WaterElectrolysis
      }
    }

    SETUP
    {
      name = Sabatier Process
      desc = <b>LqdHydrogen</b> and <b>CarbonDioxide</b> react with a nickel catalyst to produce <b>Water</b> and <b>LqdMethane</b>.
	  mass = 0.05 //WIP
      cost = 500 //WIP

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _Sabatier
      }
    }
	
	SETUP
    {
      name = Waste Incinerator
      desc = Produce <b>CarbonDioxide</b> and <b>Water</b> by combustion of <b>Waste</b> with <b>Oxygen</b>. Includes a small exhaust turbine generator. If needed <b>Water</b> will be vented to continue <b>CarbonDioxide</b> extraction.
      tech = crewSurvivability //WIP
	  mass = 0.05 //WIP
      cost = 500 //WIP

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _WasteIncinerator
      }
    }
  }
}
@PART[MiniISRU]:NEEDS[ProfileRealismOverhaul]:FOR[Kerbalism]
{
  @MODULE[ProcessController],*
  {
    @capacity *= 36.0      //  2.0 * 18  (MiniISRU is 18 times bigger than the kerbalism-chemicalplant)
  }
}

@PART[ISRU]:NEEDS[ProfileRealismOverhaul]:FOR[Kerbalism]
{
  @MODULE[ProcessController],*
  {
    @capacity *= 90.0     //  36.0 * 5 / 2  (ISRU is 5 times bigger than the MiniISRU but has double the slots)
  }

  @MODULE[Configure]
  {
    %slots = 2
  }
}

@PART[kerbalism-chemicalplant]:NEEDS[ProfileRealismOverhaul]:FOR[Kerbalism]
{
  @MODULE[ProcessController],*
  {
    @capacity *= 2.0
  }
}

// ============================================================================
// Configure Upgrade Slots
// ============================================================================

// ISRU slot upgrades
@PART[kerbalism-chemicalplant,MiniISRU,ISRU]:NEEDS[ProfileRealismOverhaul]:FOR[Kerbalism]
{ @MODULE[Configure] { @UPGRADES { @UPGRADE { @slots = #$../../slots$
      @slots += 1 } } }
}
// ECLSS slot upgrades
@PART[kerbalism-lifesupportmodule]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{ @MODULE[Configure] { @UPGRADES { @UPGRADE { @slots = #$../../slots$
      @slots += 1 } } }
}


// ============================================================================
// Add scrubber,sublimator and resources to EVA kerbals
// ============================================================================

@PART[kerbalEVA*]:NEEDS[ProfileRealismOverhaul]:FOR[Kerbalism]
{
  @RESOURCE 
  {
	name = Atmosphere  //FIXME all spacesuits are O2 only, not sure if this works though
	amount = 19		   // Suits can hold approximately 2 cubic feet of air with an astronaut inside
	maxAmount = 19	   // Liters, 5 psi (DOESN'T WORK, might be hardcoded)
  }
  
  @RESOURCE
  {
	name = WasteAtmosphere
	amount = 0
	maxAmount = 19	  // Liters
  }
  
  MODULE
  {
    name = ProcessController
    resource = _EVAScrubber
    title = EVA Scrubber
    capacity = 1.0
    toggle = true
    running = true
  }
  
  MODULE
  {
    name = ProcessController
    resource = _WaterSublimator
    title = Water Sublimator
    capacity = 1.0
    toggle = false
    running = true
  }
}

// ============================================================================
// Pseudo-resources used by processes
// ============================================================================

RESOURCE_DEFINITION
{
  name = _EVAScrubber
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _NonRegenScrubber
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _WaterSublimator
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _Scrubber
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _AdvScrubber
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _PressureControl
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _AirPump
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _WaterRecycler
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _HumidityController
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _HumidityControllerEarly
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _WasteProcessor
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _WasteIncinerator
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _SNAP3RTG
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _SNAP9RTG
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _SNAP19RTG
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _MHWRTG
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _GPHSRTG
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _MMRTG
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _FuelCell
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _WaterElectrolysis
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _Sabatier
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _BraytonGenerator
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _TurbineGenerator
  density = 0.0
  isVisible = false
}

@RESOURCE_DEFINITION[Nitrogen]    // Remove Nitrogen from fuel flow priorities (Don't know what RoverDude was thinking??)
{
  @flowMode = ALL_VESSEL
}
