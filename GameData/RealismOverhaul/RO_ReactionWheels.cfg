// Survey of reaction wheel configurations in RO on 8 APR 2022:
// ModuleReactionWheel: 493 instances in the RO repo excluding craft files.
// !MODULE[ModuleReactionWheel]: 392 instances, so we get rid of a lot of them by hand.
// @MODULE[ModuleReactionWheel] 91 results. So still a lot to go around.
// %MODULE[ModuleReactionWheel] 6 results.
// See RO GitHub Issue #197 and RP-1 GitHub Issue 103

// New pattern:
//   Parts should define reactionWheelPowerDraw to describe the RW power budget, and reactionWheelMode = "wheel" or "CMG"
//   Available torque will be computed from the budget using the rules described in RP-1 #103 and paraphrased below
//   Chose to define power budget and not torque because torque settings could be all over the place, but we have a better understanding of power budget and available EC
//
//   Note: Only RaiderNick's parts were seen to have non-uniform torque distribution in Yaw/Pitch/Roll
//   This tool will not inherently support that, but parts can run in AFTER[RealismOverhaul_ReactionWheel] and update values
//   RN's parts will initially be marked to bypass this tool
//
// Implement the non-linear power draw scaling vs torque referenced in RP-1 #103:
//   A 0.1Nm CMG could be made to run off a mere 10W, and 1Nm would require about 25W.
//   Assuming a 2.5-fold increase in power per order of magnitude, a 0.1kNm CMG would require about 160W.
//   A 0.1Nm reaction wheel would require about 150W of power and 1Nm would require upwards of 500W

// logBase = 2.5 (CMG) or 4.0 (wheel)
// Torque = 0.1Nm * Pow(10, log_<logBase>(reactionWheelPowerDraw))

// Set base parameters
@PART:HAS[#reactionWheelMode[CMG]]:FOR[RealismOverhaul_ReactionWheel]
{
	%reactionWheelPowerLogBase = 2.5
	%reactionWheelPowerBase = 0.010
}

@PART:HAS[#reactionWheelMode[wheel]]:FOR[RealismOverhaul_ReactionWheel]
{
	%reactionWheelPowerLogBase = 4
	%reactionWheelPowerBase = 0.150
}

// Build the log solver if base params are present
@PART:HAS[#reactionWheelPowerDraw,#reactionWheelPowerBase]:FOR[RealismOverhaul_ReactionWheel]
{
	!LOG_SOLVER,* {}
	LOG_SOLVER
	{
		%goal = #$/reactionWheelPowerDraw$
		@goal /= #$/reactionWheelPowerBase$
		%solution = 0
		%currentPrecision = 4
		%diff = 1
	}
}

// Iterative "shift and add" method, based off CORDIC
// Precision goal of 2^-16 is an uneducated guess
@PART:HAS[@LOG_SOLVER:HAS[#currentPrecision[>-16]]]:FOR[RealismOverhaul_ReactionWheel]
{
	// Move by step: +/- 2^currentPrecision
	@LOG_SOLVER
	{
		%delta = 2
		@delta != #$currentPrecision$
	}

	// .. in direction of sign(diff)
	@LOG_SOLVER:HAS[#diff[<0]] { @delta *= -1 }

	@LOG_SOLVER
	{
		// Apply step
		@solution += #$delta$
		@currentPrecision -= 1

		// Compute new error
		%test = #$/reactionWheelPowerLogBase$
		@test != #$solution$

		%diff = #$goal$
		@diff -= #$test$
	}

	// Check early exit condition
	@LOG_SOLVER:HAS[#diff[0]] { %currentPrecision = -100 }

	// Loop to desired precision
	MM_PATCH_LOOP {}
}

// Torque = 0.1Nm * Pow(10, log_<reactionWheelPowerLogBase>(reactionWheelPowerDraw$))
@PART:HAS[@LOG_SOLVER]:FOR[RealismOverhaul_ReactionWheel]
{
	%powTmp = 10
	@powTmp != #$LOG_SOLVER/solution$
	%reactionWheelTorque = 0.0001	// 0.1Nm, but units in kNm
	@reactionWheelTorque *= #$powTmp$
	!powTmp = DEL
}

// Assign torques and power
@PART:HAS[#reactionWheelTorque,#reactionWheelPowerDraw]:FOR[RealismOverhaul_ReactionWheel]
{
	%reactionWheelConfigured = true
	%MODULE[ModuleReactionWheel]
	{
		%PitchTorque = #$/reactionWheelTorque$
		%YawTorque = #$/reactionWheelTorque$
		%RollTorque = #$/reactionWheelTorque$
	
		%RESOURCE[ElectricCharge]
		{
			%rate = #$/reactionWheelPowerDraw$
		}
	}
}

// Delete everything that was not configured by us.
@PART:HAS[~reactionWheelConfigured,@MODULE[ModuleReactionWheel]]:LAST[RealismOveraul]
{
	!MODULE[ModuleReactionWheel],* {}
}

// Clean up working keys
@PART:HAS[#reactionWheelConfigured]:LAST[RealismOverhaul]
{
	!reactionWheelConfigured = DEL
	!reactionWheelMode = DEL
	!reactionWheelPowerDraw = DEL
	!reactionWheelPowerBase = DEL
	!reactionWheelPowerLogBase = DEL
	!reactionWheelTorque = DEL
	!LOG_SOLVER,* {}
}
