//  ==================================================
//  Allow the wheel modules to be deployed even if they
//  are shielded by other parts.
//  ==================================================

@PART:HAS[@MODULE[ModuleWheelDeployment]]:FOR[zzzRealismOverhaul]
{
	@MODULE[ModuleWheelDeployment]
	{
		%shieldedCanDeploy = True
	}
}

//  ==================================================
//  Set up the solar panel displays to indicate their
//  power generation in Watts.
//  ==================================================

// Create RealismOverhaul_SolarPanels_Late
// Allow external mods to patch in AFTER[RealismOverhaul_SolarPanels] to affect the calculation results.
@PART:HAS[@MODULE[ModuleDeployableSolarPanel]]:FOR[RealismOverhaul_SolarPanels_Late]
{
	@MODULE[ModuleDeployableSolarPanel]:HAS[#chargeRate,!RESOURCE]
	{
		RESOURCE
		{
			name = ElectricCharge
			rate = #$../chargeRate$
		}
	}

	@MODULE[ModuleDeployableSolarPanel]:HAS[@OUTPUT_RESOURCE[ElectricCharge]:HAS[#rate],!RESOURCE]
	{
		RESOURCE
		{
			name = ElectricCharge
			rate = #$../OUTPUT_RESOURCE[ElectricCharge]/rate$
		}
	}

	@MODULE[ModuleDeployableSolarPanel],*
	{
		%flowUnits = Watts
		%flowFormat = N1
		%flowMult = 1000
	}
}

//  ==================================================
//  Do the same thing for any other electricity
//  generators/consumers.
//  ==================================================

@PART:HAS[@MODULE:HAS[@RESOURCE[ElectricCharge]]]:FOR[zzzElectricityUnits]
{
	@MODULE:HAS[@RESOURCE[ElectricCharge]]
	{
		@RESOURCE[ElectricCharge]
		{
			%varyTime = False
			%useSI = True
			%displayUnitMult = 1000
			%unitName = Watts
		}
	}
}

@PART[*]:HAS[@MODULE[ModuleGenerator]]:FOR[zzzElectricityUnits]
{
	@MODULE[ModuleGenerator],*
	{
		@INPUT_RESOURCE[ElectricCharge]
		{
			%varyTime = False
			%useSI = True
			%displayUnitMult = 1000
			%unitName = Watts
		}

		@OUTPUT_RESOURCE[ElectricCharge]
		{
			%varyTime = False
			%useSI = True
			%displayUnitMult = 1000
			%unitName = Watts
		}
	}
}

// Set the pre-RO impact, G-Force, pressure tolerance, attachment node breaking force/torque, and temp limits
@PART:BEFORE[RealismOverhaul]
{
	%crashTolerance = 12
	%gTolerance = 100
	%maxPressure = 20000
	%breakingForce = 250
	%breakingTorque = 250
	%maxTemp = 1073.15			// (800°C, 1472°F).
	%skinMaxTemp = 1073.15
}

// Default engines to 673/773K unless specified elsewhere in RO
// Leaving the RSSROConfig escape hatch for now
@PART:HAS[@MODULE[ModuleEngines*],~RSSROConfig[?rue]]:BEFORE[RealismOverhaul]
{
	%maxTemp = 673.15
	%skinMaxTemp = 773.15
}

@PART:HAS[@MODULE[ModuleDeployable*]]:BEFORE[RealismOverhaul]
{
	@MODULE[ModuleDeployable*],*
	{
		%impactResistance = 0.5			// m/s of relative velocity, default 2
		%impactResistanceRetracted = 2	// m/s of relative velocity, default 5
		%windResistance = 0.5			// dynamic pressure in kPa multiplied by AoA, only applies to deployed parts, default 3
	}
}

@PART:HAS[@MODULE[ModuleROSolar]]:BEFORE[RealismOverhaul]
{
	@MODULE[ModuleROSolar],*
	{
		%impactResistance = 0.5
		%impactResistanceRetracted = 2
		%windResistance = 0.5
	}
}

//  ==================================================
//  Convert the engine modules to be compatible with
//  RealFuels.
//  ==================================================

@PART:HAS[@MODULE[ModuleEngines*],!MODULE[ModuleEnginesAJE*]]:FOR[zzzRealismOverhaul]
{
	@MODULE[ModuleEngines*],*
	{
		@name = ModuleEnginesRF
	}

	@MODULE[ModuleEngineConfigs]:HAS[#type[ModuleEngines*]]
	{
		%type = ModuleEnginesRF
	}

	@MODULE[ModuleHybridEngine]:HAS[#type[ModuleEngines*]]
	{
		%type = ModuleEnginesRF
	}
}

//  ==================================================
//  Allow the engines to be activated while shielded.
//  ==================================================

@PART[*]:HAS[@MODULE[ModuleEngines*]]:FOR[zzzRealismOverhaul]
{
	@MODULE[ModuleEngines*],*
	{
		%shieldedCanActivate = True
		%exhaustDamageMultiplier = 20
		%exhaustDamageFalloffPower = 1
		%exhaustDamageMaxMutliplier = 1.0
		%exhaustDamageSplashbackMult = 0.1
		%exhaustDamageSplashbackMaxMutliplier = 0.1
	}
}

//  ==================================================
//  Add MJ, KER and kOS support to all command parts.
//  ==================================================

@PART:HAS[@MODULE[ModuleCommand]]:AFTER[RealismOverhaul]
{
    %MODULE[MechJebCore]:NEEDS[MechJeb2]
    {
        %MechJebLocalSettings
        {
            %MechJebModuleCustomWindowEditor { &unlockTechs = start }
            %MechJebModuleSmartASS { &unlockTechs = start }
            %MechJebModuleManeuverPlanner { &unlockTechs = start }
            %MechJebModuleNodeEditor { &unlockTechs = start }
            %MechJebModuleTranslatron { &unlockTechs = start }
            %MechJebModuleWarpHelper { &unlockTechs = start }
            %MechJebModuleAttitudeAdjustment { &unlockTechs = start }
            %MechJebModuleThrustWindow { &unlockTechs = start }
            %MechJebModuleRCSBalancerWindow { &unlockTechs = start }
            %MechJebModuleRoverWindow { &unlockTechs = start }
            %MechJebModuleAscentGuidance { &unlockTechs = start }
            %MechJebModuleLandingGuidance { &unlockTechs = start }
            %MechJebModuleSpaceplaneGuidance { &unlockTechs = start }
            %MechJebModuleDockingGuidance { &unlockTechs = start }
            %MechJebModuleRendezvousAutopilotWindow { &unlockTechs = start }
            %MechJebModuleRendezvousGuidance { &unlockTechs = start }
        }
    }

    %MODULE[FlightEngineerModule]:NEEDS[KerbalEngineer] {}
    %MODULE[kOSProcessor]:NEEDS[kOS] { &diskSpace = 5000 }
}

//  ==========================================================
// Add forward and reverse control points to all command parts
//  ==========================================================

@PART[*]:HAS[@MODULE[ModuleCommand]:HAS[~defaultControlPointDisplayName]]:FOR[zzzRealismOverhaul]
{
    @MODULE[ModuleCommand]
    {
        defaultControlPointDisplayName = #autoLOC_6011003 //#autoLOC_6011003 = Default
        CONTROLPOINT
        {
            name = forward
            displayName = #autoLOC_6011001 //#autoLOC_6011001 = Forward
            orientation = 90,0,0
        }
        CONTROLPOINT
        {
            name = reverse
            displayName = #autoLOC_6011004 //#autoLOC_6011004 = Reversed
            orientation = 0,0,180
        }
    }
}

//  ==================================================
//  Add Telemachus support to all antenna parts.
//  ==================================================
@PART:HAS[@MODULE[ModuleDataTransmitter],!MODULE[TelemachusDataLink]]:NEEDS[Telemachus]:AFTER[RealismOverhaul] { %addTelemachus = true }
@PART:HAS[@MODULE[ModuleRTAntenna*],!MODULE[TelemachusDataLink]]:NEEDS[Telemachus]:AFTER[RealismOverhaul] { %addTelemachus = true }
@PART:HAS[#addTelemachus]:NEEDS[Telemachus]:AFTER[RealismOverhaul]
{
	!addTelemachus = DEL
	%MODULE[TelemachusDataLink] {}
	%MODULE[TelemachusPowerDrain]
	{
		&powerConsumptionBase = 0.001
		&powerConsumptionIncrease = 0.001
	}
}

//  ==================================================
//  Allow decoupler propellant cross - feeding.
//  ==================================================

@PART[*]:HAS[@MODULE[Module*Decouple*],!MODULE[ModuleToggleCrossfeed]]:FOR[zzzRealismOverhaul]
{
    MODULE
    {
        name = ModuleToggleCrossfeed
        crossfeedStatus = False
        toggleEditor = True
        toggleFlight = True
    }
}

//  ==================================================
// Overrides for asteroids, comets, flags
//  ==================================================
@PART[PotatoComet|PotatoRoid|flag]:FOR[zzzRealismOverhaul]
{
	%RSSROConfig = True
}

//  ==================================================
//  RSS/RO generic stuff.

//  *   Move the parts to the appropriate categories if FilterExtensions is installed.
//  *   Hide all parts that are not compatible with RO (either WIP or NON).
//  *   Tag all WIP or NON RO parts appropriately.
//  *   Cleanup RSS/RO part tags.
//  ==================================================

@PART[*]:HAS[~RSSROConfig[]]:FOR[zzzRealismOverhaul]
{
    %category:NEEDS[FilterExtensions] = 97
    %category:NEEDS[!FilterExtensions,NoNonRO] = -1
    @title ^=:^:non RO - :
    &description = 
    @description ^=:$: (PART NOT SUPPORTED BY RO):
}

@PART[*]:HAS[#RSSROConfig[?alse]]:FOR[zzzRealismOverhaul]
{
    %category:NEEDS[FilterExtensions] = 96
    %category:NEEDS[!FilterExtensions,NoNonRO] = -1
    @title ^=:^:WIP RO - :
    &description = 
    @description ^=:$: (PART IN PROGRESS, MAY NOT WORK):
}

// Fix case, just in case.
@PART:HAS[#RSSROConfig[?rue]]:FOR[zzzRealismOverhaul]
{
	%RSSROConfig = True
}

!PART:HAS[~RSSROConfig[True]]:BEFORE[zzzTagCleanup]:NEEDS[HardRemoveNonRO] {}

@PART:HAS[#RSSROConfig]:FOR[zzzTagCleanup]
{
    !RSSROConfig = NULL
}

// RemoteTech: Turn off relaying unless we specifically enabled it
@PART:HAS[@MODULE[ModuleSPU]]:AFTER[RealismOverhaul]
{
	@MODULE[ModuleSPU],*
	{
		&AllowSignalRelay = False
	}
}

//  ==================================================
//  Remove the Test Subject modules from all parts
//  ==================================================

@PART:HAS[@MODULE[ModuleTestSubject]]:LAST[RealismOverhaul]
{
    !MODULE[ModuleTestSubject],* {}
}
