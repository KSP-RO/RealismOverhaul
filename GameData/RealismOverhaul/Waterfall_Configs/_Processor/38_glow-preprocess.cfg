@PART[*]:HAS[@ROWaterfall:HAS[#glow]]:FOR[zROWaterfall_38_GlowPreprocess]:NEEDS[Waterfall]
{
    @ROWaterfall
    {
        // Create a temporary `MainPlumeVariant` for computing the glow size of the default plume.
        // This way we have a unified system for both the default plume and variants.
        MainPlumeVariant
        {
            name = __mainPlumeGlowTemp
            template = #$../template$
            position = #$../position$
            scale = #$../scale$
            recomputeGlowSize = true
            glowRecolor = #$../glow$
        }

        // Always generate template name since glow recolor is independent of force resizing.
        @MainPlumeVariant,*
        {
            __glowTemplate = #$glowRecolor$
            // Accept either a name of the form "_blue", corresponding to "waterfall-nozzle-glow-blue-1"...
            @__glowTemplate ^= :^_(.+)$:waterfall-nozzle-glow-$1-1:
            // ...or a name of the form "ro-ntr", corresponding to "rowaterfall-glow-ntr".
            @__glowTemplate ^= :^ro-:rowaterfall-glow-:
        }

        // Compute glow size when requested.
        @MainPlumeVariant:HAS[#recomputeGlowSize]
        {
            __glowPosition = #$position$
            __glowScale = #$scale$

            // Set an appropriate length for the glow.
            // Take the length to be double the average nozzle diameter, where the average nozzle
            // diameter is the average of the x and y scales.
            // Note that the doubling cancels out the division in the average.
            @__glowScale[2] = #$scale[0]$
            @__glowScale[2] += #$scale[1]$

            // Apply manual rescale on top of the computed length.
            @__glowScale[2] *= #$../glowStretch$
        }
    }
}
